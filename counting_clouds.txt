//this code counts the the number of landsat images available in the pixel, and the number of cloud free
//images in a time series for each pixel.  
//set the geometry and the start and end dates.  
// the output is a three band image with b1 = cloud free pixels, b2 = total landsat images, b3 = ratio 
//of cloud free to total images




//define start and end dates
var start = ee.Date('1984-01-01');
var end = ee.Date('2018-01-01');

// Set the region of interest to a point.
var roi = geometry; 
Map.centerObject(geometry, 10);


//gets one landsat collection and filters to the area of intrest
var landsat5 = ee.ImageCollection('LANDSAT/LT05/C01/T1_SR')
  .filterBounds(roi)
  .filterDate(start, end);
  


//gets one landsat collection and filters to the area of intrest
var landsat7 = ee.ImageCollection('LANDSAT/LE07/C01/T1_SR')
  .filterBounds(roi)
  .filterDate(start, end);

var landsat8 = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
  .filterBounds(roi)
  .filterDate(start, end);

//merges the two collections and filters to time of intrest
var landsat5_7 = ee.ImageCollection(landsat5.merge(landsat7));


var cloudMaskL457 = function(image) {
  var qa = image.select('pixel_qa');
  // If the cloud bit (5) is set and the cloud confidence (7) is high
  // or the cloud shadow bit is set (3), then it's a bad pixel.
  var cloud = qa.bitwiseAnd(1 << 5)
          .and(qa.bitwiseAnd(1 << 7))
          .or(qa.bitwiseAnd(1 << 3))
  // Remove edge pixels that don't occur in all bands
  var mask2 = image.mask().reduce(ee.Reducer.min());
  return image.updateMask(cloud.not()).updateMask(mask2);
};


  // Function to cloud mask from the pixel_qa band of Landsat 8 SR data.
var maskL8sr = function(image) {
  // Bits 3 and 5 are cloud shadow and cloud, respectively.
  var cloudShadowBitMask = 1 << 3;
  var cloudsBitMask = 1 << 5;

  // Get the pixel QA band.
  var qa = image.select('pixel_qa');

  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
      .and(qa.bitwiseAnd(cloudsBitMask).eq(0));

  // Return the masked image, scaled to TOA reflectance, without the QA bands.
  // the dividing thing doesnt do anything if just counting clounds.  need to find out what it 
  // does and how it will effect the NDVI
  
  return image.updateMask(mask).divide(10000)
      .select("B[0-9]*").float()
      .copyProperties(image, ["system:time_start"]);
};

  //apply the cloud mask to landsat 8
var l_8_cloud = landsat8.map(maskL8sr);
print(l_8_cloud);

//apply the cloud mask to landsat 5 and 7
var l_5_cloud = landsat5_7.map(cloudMaskL457);
print(l_5_cloud);

//merge the cloud free collections into an masked collection
var alllandsat = ee.ImageCollection(l_8_cloud.merge(l_5_cloud));


//merge the unmasked images into a single collection
var total_landsat = ee.ImageCollection(landsat8.merge(landsat5_7))

//print the total number of landsat images used 
print(total_landsat, 'total')



// Add a band containing image date as years since 1990.
var createTimeBand = function(img) {
var date = ee.Date(img.get('system:time_start'));
    var yearOffset = date.difference(ee.Date(start_1984), 'year');
    return ee.Image(1).addBands(yearOffset).float().addBands(img)
     .copyProperties(img, ["system:time_start", 'name'])};

//selects the cloud free images, counts the number of cloud free images available 
//and creates a single band image with the number of cloud free pixels as
// the value of the pixel 
var cloud_free = alllandsat.select("B1").count();
var cloud_free_number = cloud_free.select("B1").rename('cloud free').toDouble();

Map.addLayer(cloud_free_number)

//selects all images, counts them, and creates an image with 1 band of the total 
//number of pixels used in that location 
var total = total_landsat.select("B1").count();
var total_number = total.select("B1").rename('total pixels').toDouble();
print(total_number, 'total')
Map.addLayer(total_number)



//calculates the ratio of cloud free to total images and creates a new single band image
var ratio = cloud_free_number.divide(total_number).rename('ratio')
Map.addLayer(ratio)



// creates a new image with three bands from the above 3 images
var all = cloud_free_number.addBands(total_number).addBands(ratio);



Map.addLayer(all)
print(all, 'all')


Export.image.toDrive({
  image: all.unmask(-5),
  description: 'single_image_clouds_-cloud_free-total_pixels-ratio',
  scale: 30,
  region: roi
});
